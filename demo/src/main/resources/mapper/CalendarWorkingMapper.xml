<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.booking.mapper.CalendarWorkingMapper">
    <select id="create" resultType="com.example.booking.model.response.CalendarWorkingResponse"
            parameterType="com.example.booking.model.request.CalendarWorkingRequest">
        INSERT INTO calendar_working (
            "date",
            "time",
            employee_id,
            product_type,
            status
        )VALUES(
            #{date},
            #{time},
            #{employeeId},
            #{productType},
            #{status}
        ) RETURNING *;
    </select>

    <select id="get" resultType="com.example.booking.model.response.CalendarWorkingResponse"
            parameterType="com.example.booking.model.request.CalendarWorkingRequest">
        select * from calendar_working
        <where>
            <if test="date !=null and date !=''">
                "date" = #{date}
            </if>
            <if test="employeeId !=null and employeeId !=''">
                and "employee_id" = #{employeeId}
            </if>
            <if test="productType !=null and productType !=''">
                and "product_type" = #{productType}
            </if>
        </where>

        <if test="limit > 0">
            OFFSET (#{page} - 1) * #{limit} FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <select id="countService" resultType="com.example.booking.model.response.CalendarWorkingResponse" parameterType="com.example.booking.model.request.CalendarWorkingRequest">
        select employee_id, count(*) as countService from calendar_working
        where "date" = #{date} and product_type = #{productType}
        group by employee_id
    </select>

<!--    <select id="countEmployee" parameterType="com.example.booking.model.request.EmployeeRequest"-->
<!--            resultType="integer">-->
<!--        select count(*) from employee-->
<!--        <where>-->
<!--            <if test="date !=null and date !=''">-->
<!--                "date" = #{date}-->
<!--            </if>-->
<!--            <if test="employeeId !=null and employeeId !=''">-->
<!--                and "employee_id" = #{employeeId}-->
<!--            </if>-->
<!--        </where>-->
<!--    </select>-->

<!--    <update id="update" parameterType="com.example.booking.model.request.EmployeeRequest">-->
<!--        UPDATE employee-->
<!--        SET-->
<!--            "name" = #{name},-->
<!--            "age" = #{age},-->
<!--            "address" = #{address},-->
<!--            "phone" = #{phone},-->
<!--            "email" = #{email},-->
<!--            role = #{role},-->
<!--            max_customer = #{maxCustomer},-->
<!--            count_service = #{countService},-->
<!--            isFree = #{isFree}-->
<!--        WHERE id = #{id}::uuid-->
<!--    </update>-->

<!--    <update id="updateTimeWork" parameterType="com.example.booking.model.request.BookingInfoRequest">-->
<!--        UPDATE employee-->
<!--        SET-->
<!--            "date" = #{date},-->
<!--            start_time = #{startTime},-->
<!--            end_time = #{endTime}-->
<!--        WHERE id = #{employeeId}::uuid-->
<!--    </update>-->

<!--    <delete id="delete" parameterType="com.example.booking.model.request.EmployeeRequest">-->
<!--        DELETE FROM employee-->
<!--        WHERE id = #{id}::uuid-->
<!--    </delete>-->

<!--    <select id="checkInfo" parameterType="com.example.booking.model.request.EmployeeRequest"-->
<!--            resultType="integer">-->
<!--        select count(*) from employee-->
<!--        where code = #{code}-->
<!--    </select>-->
</mapper>